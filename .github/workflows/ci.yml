name: MentatLab CI Pipeline
on: [push, pull_request]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install PDM
        run: |
          python -m pip install --upgrade pip
          python -m pip install pdm

      - name: Cache PDM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pdm
            .venv
            services/gateway/.venv
            services/orchestrator/.venv
          key: ${{ runner.os }}-pdm-${{ matrix.python-version }}-${{ hashFiles('**/pdm.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pdm-${{ matrix.python-version }}-

      - name: Install dependencies for each service
        run: |
          # Install gateway dependencies
          cd services/gateway
          pdm install --dev
          cd ../..
          
          # Install orchestrator dependencies  
          cd services/orchestrator
          pdm install --dev
          cd ../..

      - name: Run tests
        run: |
          # Set PYTHONPATH to project root for absolute imports
          export PYTHONPATH=$PWD
          
          # Run tests with pytest from project root
          python -m pytest -c pytest.ini -v

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/frontend/package-lock.json

      - name: Install frontend dependencies
        run: npm --prefix services/frontend install

      - name: Run frontend tests
        run: |
          # Check if test script exists, otherwise skip
          if npm --prefix services/frontend run | grep -q "test"; then
            npm --prefix services/frontend run test
          else
            echo "No test script found, skipping frontend unit tests"
          fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install PDM
        run: |
          python -m pip install --upgrade pip
          python -m pip install pdm

      - name: Install all dependencies
        run: |
          # Backend services
          cd services/gateway && pdm install --dev && cd ../..
          cd services/orchestrator && pdm install --dev && cd ../..
          
          # Frontend
          npm --prefix services/frontend install

      - name: Start backend services
        run: |
          export PYTHONPATH=$PWD
          
          # Start orchestrator
          cd services/orchestrator
          pdm run uvicorn app.main:app --host 0.0.0.0 --port 8001 &
          cd ../..
          
          # Start gateway
          cd services/gateway  
          pdm run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          cd ../..
          
          # Wait for services to be ready
          echo "Waiting for backend services to be ready..."
          timeout=60
          while ! (curl -s http://localhost:8000/healthz > /dev/null && curl -s http://localhost:8001/healthz > /dev/null); do
            sleep 2
            timeout=$((timeout-2))
            if [ $timeout -le 0 ]; then
              echo "Timed out waiting for backend services."
              exit 1
            fi
          done
          echo "Backend services are ready!"

      - name: Run E2E tests
        run: |
          # Check if e2e script exists
          if npm --prefix services/frontend run | grep -q "e2e"; then
            npm --prefix services/frontend run e2e
          else
            echo "No e2e script found, running basic connectivity test"
            curl -f http://localhost:8000/healthz
            curl -f http://localhost:8001/healthz
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff black isort

      - name: Run Python linters
        run: |
          # Run linters on Python code
          ruff check services/ || true
          black --check services/ || true
          isort --check-only services/ || true
