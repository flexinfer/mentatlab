name: MentatLab CI Pipeline
on: [push, pull_request]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install PDM
        run: |
          python -m pip install --upgrade pip
          python -m pip install pdm

      - name: Cache PDM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pdm
            .venv
            services/gateway/.venv
            services/orchestrator/.venv
          key: ${{ runner.os }}-pdm-${{ matrix.python-version }}-${{ hashFiles('**/pdm.lock', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pdm-${{ matrix.python-version }}-

      - name: Install dependencies for each service
        run: |
          # Install gateway dependencies
          cd services/gateway
          pdm install --dev
          cd ../..
          
          # Install orchestrator dependencies  
          cd services/orchestrator
          pdm install --dev
          cd ../..

      - name: Run Gateway tests
        run: |
          # Set PYTHONPATH to project root for absolute imports
          export PYTHONPATH=$PWD
          
          # Run gateway tests within its PDM environment
          cd services/gateway
          pdm run pytest tests/ -v
          cd ../..
      
      - name: Run Orchestrator tests
        run: |
          # Set PYTHONPATH to project root for absolute imports
          export PYTHONPATH=$PWD
          
          # Run orchestrator tests within its PDM environment
          cd services/orchestrator
          pdm run pytest app/tests/ -v
          cd ../..
      
      - name: Run Echo Agent tests
        run: |
          # Set PYTHONPATH to project root for absolute imports
          export PYTHONPATH=$PWD
          
          # Check if echo agent has tests
          if [ -d "services/agents/echo/app/tests" ]; then
            cd services/agents/echo
            # Install pytest if needed
            python -m pip install pytest
            python -m pytest app/tests/ -v
            cd ../../..
          else
            echo "No tests found for echo agent"
          fi

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/frontend
    env:
      VITE_ORCHESTRATOR_URL: "http://localhost:7070"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect package manager
        id: detect-pm
        run: |
          # detect lockfile in services/frontend (working-directory is services/frontend due to defaults)
          if [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "cache=pnpm" >> $GITHUB_OUTPUT
            echo "dep_path=services/frontend/pnpm-lock.yaml" >> $GITHUB_OUTPUT
          elif [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "cache=yarn" >> $GITHUB_OUTPUT
            echo "dep_path=services/frontend/yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f "package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "cache=npm" >> $GITHUB_OUTPUT
            echo "dep_path=services/frontend/package-lock.json" >> $GITHUB_OUTPUT
          else
            # default to npm if no lockfile present
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "cache=npm" >> $GITHUB_OUTPUT
            echo "dep_path=services/frontend/package-lock.json" >> $GITHUB_OUTPUT
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect-pm.outputs.cache }}
          cache-dependency-path: ${{ steps.detect-pm.outputs.dep_path }}

      - name: Install dependencies
        run: |
          if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
            corepack enable
            corepack prepare pnpm@latest --activate
            pnpm install --frozen-lockfile
          elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
            corepack enable
            corepack prepare yarn@stable --activate
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Optional type-check
        run: |
          if grep -q '"type-check"' package.json; then
            echo "Running type-check script"
            if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
              pnpm run type-check || true
            elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
              yarn run type-check || true
            else
              npm run type-check || true
            fi
          else
            echo "No type-check script found, skipping"
          fi

      - name: Run frontend tests
        env:
          CI: 1
        run: |
          if [ "${{ steps.detect-pm.outputs.manager }}" = "pnpm" ]; then
            if pnpm run | grep -q "test"; then
              pnpm run test -- --run
            else
              echo "No test script found, skipping frontend unit tests"
            fi
          elif [ "${{ steps.detect-pm.outputs.manager }}" = "yarn" ]; then
            if yarn run | grep -q "test"; then
              yarn run test -- --run
            else
              echo "No test script found, skipping frontend unit tests"
            fi
          else
            if npm run | grep -q "test"; then
              npm run test -- --run
            else
              echo "No test script found, skipping frontend unit tests"
            fi
          fi

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install PDM
        run: |
          python -m pip install --upgrade pip
          python -m pip install pdm

      - name: Install all dependencies
        run: |
          # Backend services
          cd services/gateway && pdm install --dev && cd ../..
          cd services/orchestrator && pdm install --dev && cd ../..
          
          # Frontend
          npm --prefix services/frontend install
          
      - name: Install Playwright Browsers
        run: |
          cd services/frontend
          npx playwright install --with-deps
          cd ../..

      - name: Start backend services
        run: |
          export PYTHONPATH=$PWD
          
          # Start orchestrator
          cd services/orchestrator
          pdm run uvicorn app.main:app --host 0.0.0.0 --port 8001 &
          cd ../..
          
          # Start gateway
          cd services/gateway  
          pdm run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          cd ../..
          
          # Wait for services to be ready
          echo "Waiting for backend services to be ready..."
          timeout=60
          while ! (curl -s http://localhost:8000/healthz > /dev/null && curl -s http://localhost:8001/healthz > /dev/null); do
            sleep 2
            timeout=$((timeout-2))
            if [ $timeout -le 0 ]; then
              echo "Timed out waiting for backend services."
              exit 1
            fi
          done
          echo "Backend services are ready!"

      - name: Run E2E tests
        run: |
          # Check if e2e script exists
          if npm --prefix services/frontend run | grep -q "e2e"; then
            npm --prefix services/frontend run e2e
          else
            echo "No e2e script found, running basic connectivity test"
            curl -f http://localhost:8000/healthz
            curl -f http://localhost:8001/healthz
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff black isort

      - name: Run Python linters
        run: |
          # Run linters on Python code
          ruff check services/ || true
          black --check services/ || true
          isort --check-only services/ || true
