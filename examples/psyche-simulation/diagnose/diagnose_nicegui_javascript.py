\n#!/usr/bin/env python3\n\"\"\"\nDiagnose NiceGUI JavaScript execution and real-time updates.\n\"\"\"\n\nimport asyncio\nimport inspect\nfrom nicegui import ui\n\n\ndef main():\n    \"\"\"Run diagnostics on NiceGUI JavaScript capabilities.\"\"\"\n    \n    print(\"=\" * 80)\n    print(\"NiceGUI JavaScript Execution Diagnostics\")\n    print(\"=\" * 80)\n    \n    # Check ui.run_javascript signature\n    print(\"\\n1. Checking ui.run_javascript signature:\")\n    sig = inspect.signature(ui.run_javascript)\n    print(f\"   Signature: {sig}\")\n    print(f\"   Parameters: {list(sig.parameters.keys())}\")\n    \n    # Check if respond parameter exists\n    if 'respond' in sig.parameters:\n        print(\"   ✓ 'respond' parameter exists\")\n    else:\n        print(\"   ✗ 'respond' parameter does NOT exist\")\n    \n    # Check available UI update methods\n    print(\"\\n2. Available UI update methods:\")\n    ui_methods = [attr for attr in dir(ui) if not attr.startswith('_')]\n    update_methods = [m for m in ui_methods if 'update' in m.lower() or 'notify' in m.lower()]\n    for method in update_methods:\n        print(f\"   - ui.{method}\")\n    \n    # Create test page\n    print(\"\\n3. Creating test page for real-time updates...\")\n    \n    @ui.page('/')\n    async def index():\n        \"\"\"Test page for real-time updates.\"\"\"\n        \n        ui.label(\"Real-time Update Test\").classes('text-2xl font-bold mb-4')\n        \n        # Test different update methods\n        with ui.column().classes('gap-4'):\n            # Method 1: Direct label update\n            label1 = ui.label(\"Direct update: waiting...\").classes('p-2 bg-blue-100')\n            \n            # Method 2: Using ui.timer\n            label2 = ui.label(\"Timer update: 0\").classes('p-2 bg-green-100')\n            counter = {'value': 0}\n            \n            def update_timer():\n                counter['value'] += 1\n                label2.set_text(f\"Timer update: {counter['value']}\")\n            \n            ui.timer(1.0, update_timer)\n            \n            # Method 3: JavaScript without respond\n            label3 = ui.label(\"JS update: waiting...\").classes('p-2 bg-yellow-100')\n            \n            # Method 4: Using ui.on for custom events\n            label4 = ui.label(\"Custom event: waiting...\").classes('p-2 bg-purple-100')\n            \n            # Test buttons\n            async def test_direct():\n                label1.set_text(\"Direct update: SUCCESS!\")\n                \n            async def test_js():\n                # Test without respond parameter\n                try:\n                    ui.run_javascript(f\"\"\"\n                        const label = document.querySelector('.bg-yellow-100');\n                        if (label) {{\n                            label.textContent = 'JS update: SUCCESS!';\n                        }}\n                    \"\"\")\n                    print(\"✓ JavaScript executed without errors\")\n                except Exception as e:\n                    print(f\"✗ JavaScript error: {e}\")\n                    label3.set_text(f\"JS update: ERROR - {e}\")\n            \n            async def test_async_js():\n                # Test async JavaScript execution\n                try:\n                    # Don't await on auto-index page\n                    asyncio.create_task(ui.run_javascript(\"\"\"\n                        const label = document.querySelector('.bg-purple-100');\n                        if (label) {\n                            label.textContent = 'Custom event: ASYNC SUCCESS!';\n                        }\n                    \"\"\"))\n                    print(\"✓ Async JavaScript task created\")\n                except Exception as e:\n                    print(f\"✗ Async JavaScript error: {e}\")\n            \n            # Add test for WebSocket-style updates\n            messages_container = ui.column().classes('gap-2 p-4 bg-gray-100 min-h-[200px]')\n            \n            async def simulate_websocket_message():\n                \"\"\"Simulate receiving a WebSocket message.\"\"\"\n                # Create message card\n                with messages_container:\n                    with ui.card().classes('p-2 opacity-0 transition-opacity duration-500') as card:\n                        ui.label(f\"WebSocket message at {asyncio.get_event_loop().time():.2f}\")\n                \n                # Animate appearance\n                await asyncio.sleep(0.1)  # Small delay for DOM update\n                try:\n                    # Use JavaScript to animate\n                    ui.run_javascript(\"\"\"\n                        const cards = document.querySelectorAll('.transition-opacity');\n                        const lastCard = cards[cards.length - 1];\n                        if (lastCard) {\n                            lastCard.classList.remove('opacity-0');\n                            lastCard.classList.add('opacity-100');\n                        }\n                    \"\"\")\n                except Exception as e:\n                    print(f\"Animation error: {e}\")\n            \n            # Control buttons\n            with ui.row().classes('gap-2'):\n                ui.button(\"Test Direct\", on_click=test_direct)\n                ui.button(\"Test JS\", on_click=test_js)\n                ui.button(\"Test Async JS\", on_click=test_async_js)\n                ui.button(\"Simulate WebSocket\", on_click=simulate_websocket_message)\n        \n        # Add page-level JavaScript\n        ui.add_head_html(\"\"\"\n        <script>\n            // Define WebSocket event handler\n            window.websocketEventHandler = function(event) {\n                console.log('WebSocket event received:', event);\n                \n                // Find message container\n                const container = document.querySelector('.min-h-\\\\[200px\\\\]');\n                if (container) {\n                    const card = document.createElement('div');\n                    card.className = 'p-2 bg-white rounded shadow';\n                    card.textContent = `Event: ${event.type} at ${new Date().toLocaleTimeString()}`;\n                    container.appendChild(card);\n                }\n            };\n            \n            console.log('WebSocket handler registered');\n        </script>\n        \"\"\")\n    \n    print(\"\\n4. Starting server on http://localhost:8080\")\n    print(\"   Test each button to see different update methods\")\n    print(\"   Check browser console for JavaScript logs\")\n    \n    ui.run(port=8080, title=\"NiceGUI Real-time Test\")\n\n\nif __name__ == \"__main__\":\n    main()\n