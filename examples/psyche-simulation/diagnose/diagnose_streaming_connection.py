\n#!/usr/bin/env python3\n\"\"\"\nDiagnose the streaming UI WebSocket connection issue\n\"\"\"\n\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef diagnose_websocket_flow():\n    \"\"\"Diagnose why WebSocket messages aren't updating the UI\"\"\"\n    \n    logger.info(\"=\" * 80)\n    logger.info(\"STREAMING UI WEBSOCKET DIAGNOSIS\")\n    logger.info(\"=\" * 80)\n    \n    issues = []\n    \n    # Check 1: UIManager broadcast calls\n    logger.info(\"\\n1. Checking UIManager broadcast implementation...\")\n    with open('ui/components.py', 'r') as f:\n        ui_manager_content = f.read()\n    \n    # Look for the broadcast call in run_autonomous_loop\n    if \"if self.broadcaster:\" in ui_manager_content and \"await self.broadcaster.broadcast_agent_message\" in ui_manager_content:\n        logger.info(\"‚úÖ UIManager calls broadcaster.broadcast_agent_message\")\n    else:\n        logger.error(\"‚ùå UIManager might not be calling broadcaster correctly\")\n        issues.append(\"UIManager broadcast call missing or incorrect\")\n    \n    # Check 2: WebSocket broadcaster implementation\n    logger.info(\"\\n2. Checking WebSocket broadcaster implementation...\")\n    with open('utils/websocket_broadcaster.py', 'r') as f:\n        broadcaster_content = f.read()\n    \n    # Check if _update_ui_clients is called\n    if \"await self._update_ui_clients('agent_message',\" in broadcaster_content:\n        logger.info(\"‚úÖ Broadcaster calls _update_ui_clients for agent messages\")\n    else:\n        logger.error(\"‚ùå Broadcaster not calling _update_ui_clients\")\n        issues.append(\"Broadcaster not updating UI clients\")\n    \n    # Check 3: JavaScript execution\n    if \"ui.run_javascript(js_code)\" in broadcaster_content:\n        logger.info(\"‚úÖ Broadcaster uses ui.run_javascript\")\n    else:\n        logger.error(\"‚ùå Broadcaster not executing JavaScript\")\n        issues.append(\"JavaScript execution missing\")\n    \n    # Check 4: RealtimeUIUpdater registration\n    logger.info(\"\\n3. Checking RealtimeUIUpdater registration...\")\n    with open('ui/streaming_main_window.py', 'r') as f:\n        streaming_content = f.read()\n    \n    # Check if ui_updater is registered\n    if \"ui_updater.register_element('conversation_display',\" in streaming_content:\n        logger.info(\"‚úÖ Conversation display is registered with ui_updater\")\n    else:\n        logger.warning(\"‚ö†Ô∏è  Conversation display might not be registered\")\n        issues.append(\"Conversation display not registered\")\n    \n    # Check 5: Event handler registration\n    logger.info(\"\\n4. Checking event handler setup...\")\n    if \"window.websocketEventHandler\" in streaming_content:\n        logger.info(\"‚úÖ JavaScript websocketEventHandler is defined\")\n    else:\n        logger.error(\"‚ùå websocketEventHandler not defined\")\n        issues.append(\"JavaScript event handler missing\")\n    \n    # The KEY ISSUE: The broadcaster broadcasts but UI updater doesn't receive it\n    logger.info(\"\\n5. Analyzing the disconnect...\")\n    logger.info(\"The flow should be:\")\n    logger.info(\"  1. UIManager.run_autonomous_loop calls broadcaster.broadcast_agent_message\")\n    logger.info(\"  2. broadcast_agent_message calls _broadcast_agent_message (websocket_events)\")\n    logger.info(\"  3. broadcast_agent_message ALSO calls _update_ui_clients\")\n    logger.info(\"  4. _update_ui_clients runs JavaScript to trigger websocketEventHandler\")\n    logger.info(\"  5. BUT: The RealtimeUIUpdater.handle_agent_message should be called!\")\n    \n    # Check if RealtimeUIUpdater is listening to events\n    if \"self.event_handlers = {\" in broadcaster_content:\n        logger.info(\"\\n‚úÖ RealtimeUIUpdater has event handlers defined\")\n    else:\n        logger.error(\"\\n‚ùå RealtimeUIUpdater missing event handlers\")\n        issues.append(\"Event handlers not defined\")\n    \n    # THE REAL ISSUE: RealtimeUIUpdater isn't subscribed to WebSocket events!\n    logger.info(\"\\nüîç KEY FINDING:\")\n    logger.info(\"The RealtimeUIUpdater has handlers but isn't subscribed to the WebSocket event manager!\")\n    logger.info(\"The WebSocketBroadcaster broadcasts events, but RealtimeUIUpdater doesn't listen to them.\")\n    \n    return issues\n\ndef propose_fix():\n    \"\"\"Propose a fix for the issue\"\"\"\n    \n    logger.info(\"\\n\" + \"=\" * 80)\n    logger.info(\"PROPOSED FIX\")\n    logger.info(\"=\" * 80)\n    \n    logger.info(\"The RealtimeUIUpdater needs to subscribe to WebSocket events.\")\n    logger.info(\"It should listen to the event manager and call its handlers.\")\n    logger.info(\"\\nOptions:\")\n    logger.info(\"1. Make RealtimeUIUpdater subscribe to the event manager\")\n    logger.info(\"2. Directly call RealtimeUIUpdater handlers from broadcaster\")\n    logger.info(\"3. Use a different approach for UI updates\")\n    \n    logger.info(\"\\nThe issue is architectural:\")\n    logger.info(\"- WebSocketBroadcaster sends events via event_manager\")\n    logger.info(\"- But RealtimeUIUpdater doesn't listen to event_manager\")\n    logger.info(\"- So the UI handlers never get called!\")\n\nif __name__ == \"__main__\":\n    issues = diagnose_websocket_flow()\n    \n    if issues:\n        logger.error(f\"\\nFound {len(issues)} issues:\")\n        for issue in issues:\n            logger.error(f\"  - {issue}\")\n    \n    propose_fix()\n