apiVersion: apps/v1
kind: Deployment
metadata:
  name: psyche-simulation
  namespace: psyche-simulation
  labels:
    app: psyche-simulation
    component: web
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: psyche-simulation
      component: web
  template:
    metadata:
      labels:
        app: psyche-simulation
        component: web
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: psyche-simulation
        image: psyche-simulation:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        # Configuration from ConfigMap
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: LOG_LEVEL
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: PORT
        
        # Redis Configuration
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: REDIS_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: REDIS_PASSWORD
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        
        # LLM Configuration
        - name: LLM_API_URL
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: LLM_API_URL
        - name: LLM_API_KEY
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: LLM_API_KEY
        - name: LLM_MODEL
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: LLM_MODEL
        - name: LLM_MAX_TOKENS
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: LLM_MAX_TOKENS
        - name: LLM_TEMPERATURE
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: LLM_TEMPERATURE
        
        # Security Configuration
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: JWT_SECRET_KEY
        - name: DB_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: DB_ENCRYPTION_KEY
        - name: SESSION_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: SESSION_ENCRYPTION_KEY
        
        # WebSocket Configuration
        - name: WEBSOCKET_AUTH_KEY
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: WEBSOCKET_AUTH_KEY
        - name: WEBSOCKET_ENABLE_REDIS
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: WEBSOCKET_ENABLE_REDIS
        
        # Health Check Configuration
        - name: HEALTH_CHECK_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: HEALTH_CHECK_INTERVAL
        
        # Metrics Configuration
        - name: METRICS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: METRICS_ENABLED
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for slow-starting containers
        startupProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
        - name: logs
          mountPath: /app/logs
        - name: agent-config
          mountPath: /app/config/agents
          readOnly: true
        
        # Environment-specific settings
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      
      # Init Container for Redis connectivity check
      initContainers:
      - name: redis-check
        image: redis:7.2-alpine
        command:
        - sh
        - -c
        - |
          echo "Checking Redis connectivity..."
          until redis-cli -h $REDIS_HOST -p $REDIS_PORT -a $REDIS_PASSWORD ping; do
            echo "Waiting for Redis..."
            sleep 2
          done
          echo "Redis is ready!"
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: psyche-simulation-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: psyche-simulation-secrets
              key: REDIS_PASSWORD
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: agent-config
        configMap:
          name: psyche-simulation-agent-config
          defaultMode: 0644
      
      # Pod scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - psyche-simulation
              topologyKey: kubernetes.io/hostname
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # DNS Policy
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always